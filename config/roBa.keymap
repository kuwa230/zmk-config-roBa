#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&lt 1 Q           &kp W         &kp E             &kp R           &kp T                                             &kp Y        &kp U  &lt 5 I    &kp O    &kp P
&kp A             &kp S         &kp D             &lt 6 F         &kp G                 &kp ESCAPE      &kp MINUS   &kp H        &kp J  &kp K      &kp L    &lt 2 ENTER
&kp Z             &kp X         &kp C             &kp V           &kp B                 &kp TAB         &kp DELETE  &kp N        &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LEFT_COMMAND  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &kp LG(LS(NUMBER_4))  &kp F13         &kp F14     &lt 3 SPACE                             &kp BACKSPACE
            >;
        };

        FUNCTION {
            bindings = <
&trans            &trans        &trans            &trans          &trans                      &trans  &kp F7  &kp F8  &kp F9  &kp F10
&trans            &trans        &trans            &trans          &trans  &trans      &trans  &trans  &kp F4  &kp F5  &kp F6  &kp F11
&trans            &trans        &trans            &trans          &trans  &trans      &trans  &trans  &kp F1  &kp F2  &kp F3  &kp F12
&kp LEFT_COMMAND  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        NUM {
            bindings = <
&kp EXCLAMATION  &kp DOUBLE_QUOTES  &kp HASH              &kp DOLLAR             &kp PERCENT                                   &trans  &kp AT_SIGN    &kp LEFT_BRACKET   &trans  &trans
&kp AMPERSAND    &kp SINGLE_QUOTE   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp CARET    &kp INTERNATIONAL_3      &trans  &trans  &kp SEMICOLON  &kp RIGHT_BRACKET  &trans  &trans
&trans           &trans             &trans                &trans                 &trans       &trans                   &trans  &trans  &kp COLON      &kp UNDER          &trans  &trans
&trans           &trans             &trans                &trans                 &trans       &trans                   &trans  &trans                                            &trans
            >;
        };

        ARROW {
            bindings = <
&kp LG(Q)         &kp LG(W)        &trans                 &trans             &kp LG(T)                                         &trans              &trans          &kp UP_ARROW    &kp MINUS        &kp BACKSPACE
&kp HOME          &kp LC(LS(TAB))  &kp LG(LEFT_BRACKET)   &kp LC(TAB)        &kp END               &trans              &trans  &kp LG(LEFT_ARROW)  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp LG(RIGHT_ARROW)
&trans            &kp LC(PAGE_UP)  &kp LG(RIGHT_BRACKET)  &kp LC(PAGE_DOWN)  &trans                &trans              &trans  &trans              &trans          &trans          &trans           &trans
&kp LEFT_COMMAND  &kp LEFT_ALT     &kp LEFT_CONTROL       &kp LEFT_SHIFT     &kp LG(LS(NUMBER_3))  &kp LG(LS(N5))      &trans  &trans                                                               &trans
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans    &trans                        &trans  &trans    &trans  &trans    &trans
&trans  &trans  &trans  &mkp MB4  &mkp MB5  &trans      &trans  &trans  &mkp MB1  &trans  &mkp MB2  &trans
&trans  &trans  &trans  &trans    &trans    &trans      &trans  &trans  &trans    &trans  &trans    &trans
&trans  &trans  &trans  &trans    &trans    &trans      &trans  &trans                              &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans              &kp LC(UP_ARROW)     &kp LG(A)      &kp LG(X)                             &trans  &trans  &trans  &trans  &trans
&trans  &kp LC(LEFT_ARROW)  &kp LC(RIGHT_ARROW)  &kp LG(C)      &kp LG(V)  &kp LG(LA(V))      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans              &kp LG(LC(F))        &kp LG(Z)      &kp LG(Y)  &kp LG(LS(Z))      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans              &trans               &kp LG(LS(C))  &trans     &trans             &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans  &trans                                   &trans      &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp PLUS
&bt BT_SEL 3  &bt BT_SEL 4  &trans        &trans  &trans  &bt BT_CLR      &trans           &trans      &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp MINUS
&trans        &trans        &trans        &trans  &trans  &trans          &bootloader      &trans      &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp ASTERISK
&trans        &trans        &trans        &trans  &trans  &trans          &kp KP_NUMBER_0  &kp PERIOD                                                     &kp SLASH
            >;
        };
    };
};
