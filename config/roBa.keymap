#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos { compatible = "zmk,combos"; };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 1 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&lt 1 Q           &kp W         &kp E             &kp R           &kp T                                                       &kp Y        &kp U  &lt 5 I    &kp O    &kp P
&kp A             &kp S         &kp D             &kp F           &kp G                 &lt 6 ESCAPE          &kp MINUS       &kp H        &kp J  &kp K      &kp L    &lt 2 ENTER
&kp Z             &kp X         &kp C             &kp V           &kp B                 &kp TAB               &kp DELETE      &kp N        &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LEFT_COMMAND  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &kp LS(LG(NUMBER_4))  &kp INT_MUHENKAN      &kp INT_HENKAN  &lt 3 SPACE                             &kp BACKSPACE
            >;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &kp F1   &kp F2   &kp F3   &kp F4  &kp F5
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp F6   &kp F7   &kp F8   &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp F10  &kp F11  &kp F12  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                             &trans
            >;
        };

        NUM {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4    &kp N5                          &trans         &kp AT_SIGN  &kp LEFT_BRACKET   &trans  &trans
&kp NUMBER_6  &kp N7        &kp N8        &kp N9          &kp N0      &trans      &trans  &kp SEMICOLON  &kp COLON    &kp RIGHT_BRACKET  &trans  &trans
&kp MINUS     &kp LCTRL     &kp INT_YEN   &kp UNDERSCORE  &kp PERIOD  &trans      &trans  &trans         &trans       &trans             &trans  &trans
&trans        &trans        &trans        &trans          &trans      &trans      &trans  &trans                                                 &trans
            >;
        };

        ARROW {
            bindings = <
&kp LG(Q)         &kp LG(W)     &trans            &trans             &kp LG(T)                                         &trans  &trans          &kp UP_ARROW    &trans           &trans
&kp HOME          &trans        &kp LC(LS(TAB))   &kp LC(TAB)        &kp END               &trans              &trans  &trans  &kp LEFT_ARROW  &kt DOWN_ARROW  &kp RIGHT_ARROW  &trans
&trans            &trans        &kp LC(PAGE_UP)   &kp LC(PAGE_DOWN)  &trans                &trans              &trans  &trans  &trans          &trans          &trans           &trans
&kp LEFT_COMMAND  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT     &kp LS(LG(NUMBER_4))  &kp LS(LG(N5))      &trans  &trans                                                   &trans
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &trans  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                              &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans        &kp LC(UP_ARROW)  &kp LG(A)  &kp LG(X)                             &trans  &trans  &trans  &trans  &trans
&trans  &kp LC(LEFT)  &kp LC(RIGHT)     &kp LG(C)  &kp LG(V)  &kp LS(LG(V))      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &kp LC(LG(F))     &trans     &trans     &trans             &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans            &trans     &trans     &trans             &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&bt BT_SEL 0         &bt BT_SEL 1  &bt BT_SEL 2              &bt BT_SEL 3  &bt BT_SEL 4                           &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &trans           &kp PLUS
&trans               &trans        &trans                    &trans        &bt BT_CLR      &trans         &trans  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp PERIOD       &kp MINUS
&kp INTERNATIONAL_2  &kp INT2      &kp INT_KATAKANAHIRAGANA  &kp INT_KANA  &kp LANGUAGE_4  &kp LANG4      &trans  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_NUMBER_0  &kp ASTERISK
&trans               &trans        &trans                    &trans        &trans          &trans         &trans  &trans                                                              &kp SLASH
            >;
        };
    };
};
